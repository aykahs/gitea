name: Create Release ZIP
on:
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      tag_name:
        description: Release tag name
        required: true
        default: v1.0.0

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 }

      - name: Set release variables
        run: |
          if [ -n "${{ inputs.tag_name }}" ]; then TAG_NAME="${{ inputs.tag_name }}";
          elif [ "${GITHUB_REF_TYPE:-}" = "tag" ]; then TAG_NAME="${GITHUB_REF_NAME}";
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then TAG_NAME="${GITHUB_REF#refs/tags/}";
          else TAG_NAME=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "v1.0.0"); fi
          REPO_NAME=$(basename "${GITHUB_REPOSITORY:-${GITEA_REPOSITORY:-$(pwd)}}")
          ZIP_NAME="${REPO_NAME}-${TAG_NAME}.zip"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "RELEASE_NAME=Release $TAG_NAME" >> $GITHUB_ENV
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - run: sudo apt-get update && sudo apt-get install -y zip rsync

      - name: Create project ZIP
        run: |
          mkdir -p release-build
          rsync -av --exclude='.git' --exclude='node_modules' --exclude='*.log' \
            --exclude='.env*' --exclude='dist' --exclude='build' --exclude='release-build' \
            --exclude='.DS_Store' --exclude='Thumbs.db' --exclude='*.tmp' \
            --exclude='.cache' --exclude='coverage' . release-build/
          cd release-build && zip -r "../$ZIP_NAME" . -x "*.git*" && cd ..
          sha256sum "$ZIP_NAME" > "$ZIP_NAME.sha256"
          md5sum "$ZIP_NAME" > "$ZIP_NAME.md5"

      - name: Create Gitea Release
        run: |
          cat > release_payload.json <<EOF
          { "tag_name": "$TAG_NAME", "name": "$RELEASE_NAME",
            "body": "Release $TAG_NAME - download assets below.", 
            "draft": false, "prerelease": false }
          EOF
          curl -s -X POST -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
            -H "Content-Type: application/json" -d @release_payload.json \
            "${{ gitea.api_url }}/repos/${{ gitea.repository }}/releases" > release_response.json
          RELEASE_ID=$(grep -o '"id":[0-9]*' release_response.json | head -1 | cut -d':' -f2)
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV

      - name: Upload assets
        run: |
          for f in "$ZIP_NAME" "$ZIP_NAME.sha256" "$ZIP_NAME.md5"; do
            curl -s -X POST -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
              -F "attachment=@$f" \
              "${{ gitea.api_url }}/repos/${{ gitea.repository }}/releases/$RELEASE_ID/assets?name=$(basename $f)"
          done

      - name: Update release notes
        run: |
          cat > update_payload.json <<EOF
          { "body": "Release $TAG_NAME\nZIP: $ZIP_NAME ($(du -h "$ZIP_NAME" | cut -f1))\nSHA256: $(cut -d' ' -f1 $ZIP_NAME.sha256)\nMD5: $(cut -d' ' -f1 $ZIP_NAME.md5)" }
          EOF
          curl -s -X PATCH -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
            -H "Content-Type: application/json" -d @update_payload.json \
            "${{ gitea.api_url }}/repos/${{ gitea.repository }}/releases/$RELEASE_ID"

      - name: Summary
        run: |
          echo "âœ… Release $TAG_NAME created"
          echo "ZIP: $ZIP_NAME ($(du -h "$ZIP_NAME" | cut -f1))"
          echo "SHA256: $(cut -d' ' -f1 $ZIP_NAME.sha256)"
          echo "ðŸ‘‰ ${{ gitea.server_url }}/${{ gitea.repository }}/releases/tag/$TAG_NAME"
