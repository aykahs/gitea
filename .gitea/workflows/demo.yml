name: Create Release ZIP

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual trigger
    inputs:
      tag_name:
        description: 'Release tag name'
        required: true
        default: 'v1.0.0'

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history
          repository: http://host.docker.internal:3000/prajwol/test.git

      - name: Set release variables
        run: |
          # Check if this is a manual trigger by looking for inputs
          if [ -n "${{ inputs.tag_name }}" ]; then
            TAG_NAME="${{ inputs.tag_name }}"
            echo "Manual trigger with tag: ${TAG_NAME}"
          else
            # For tag pushes, extract from ref
            if [ "${GITHUB_REF_TYPE:-}" = "tag" ]; then
              TAG_NAME="${GITHUB_REF_NAME}"
            elif [ -n "${GITHUB_REF}" ] && [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              TAG_NAME="${GITHUB_REF#refs/tags/}"
            else
              # Fallback - try to get from git
              TAG_NAME=$(git describe --tags --exact-match HEAD 2>/dev/null || echo "v1.0.0")
            fi
            echo "Tag push trigger with tag: ${TAG_NAME}"
          fi
          
          # Extract repository name from full path or use fallback
          if [ -n "$GITHUB_REPOSITORY" ]; then
            REPO_NAME=$(basename "$GITHUB_REPOSITORY")
          elif [ -n "$GITEA_REPOSITORY" ]; then
            REPO_NAME=$(basename "$GITEA_REPOSITORY")
          else
            REPO_NAME=$(basename "$(pwd)")
          fi
          
          ZIP_NAME="${REPO_NAME}-${TAG_NAME}.zip"
          
          # Export as environment variables for subsequent steps
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          echo "RELEASE_NAME=Release ${TAG_NAME}" >> $GITHUB_ENV
          echo "ZIP_NAME=${ZIP_NAME}" >> $GITHUB_ENV
          
          echo "Release tag: ${TAG_NAME}"
          echo "ZIP filename: ${ZIP_NAME}"
          echo "Repository: ${REPO_NAME}"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip rsync

      - name: Create project ZIP
        run: |
          echo "Creating release ZIP: $ZIP_NAME"
          
          # Create a clean directory for the release
          mkdir -p release-build
          
          # Copy project files (exclude development and system files)
          rsync -av \
                --exclude='.git' \
                --exclude='.gitea' \
                --exclude='node_modules' \
                --exclude='*.log' \
                --exclude='.env' \
                --exclude='.env.local' \
                --exclude='.env.example' \
                --exclude='dist' \
                --exclude='build' \
                --exclude='release-build' \
                --exclude='.DS_Store' \
                --exclude='Thumbs.db' \
                --exclude='*.tmp' \
                --exclude='.cache' \
                --exclude='coverage' \
                . release-build/
          
          # Create ZIP file
          cd release-build
          zip -r "../$ZIP_NAME" . -x "*.git*"
          cd ..
          
          # Verify the ZIP was created
          if [ ! -f "$ZIP_NAME" ]; then
            echo "❌ Error: ZIP file was not created"
            exit 1
          fi
          
          # Generate checksums
          sha256sum "$ZIP_NAME" > "$ZIP_NAME.sha256"
          md5sum "$ZIP_NAME" > "$ZIP_NAME.md5"
          
          echo "✅ Created ZIP: $ZIP_NAME"
          echo "📦 ZIP size: $(du -h "$ZIP_NAME" | cut -f1)"
          
          # Show checksums
          echo "🔐 SHA256: $(cat "$ZIP_NAME.sha256" | cut -d' ' -f1)"
          echo "🔐 MD5: $(cat "$ZIP_NAME.md5" | cut -d' ' -f1)"
          
          # List contents for verification
          echo "📋 ZIP contents:"
          unzip -l "$ZIP_NAME" | head -20

      - name: Generate release notes
        run: |
          # Generate release notes with environment variables
          cat > release_notes.md << EOF
          ## 🚀 Release $TAG_NAME
          
          ### 📦 Download Information
          
          | File | Size | Checksum Type | Hash |
          |------|------|---------------|------|
          | \`$ZIP_NAME\` | \`$(du -h "$ZIP_NAME" | cut -f1)\` | SHA256 | \`$(cat "$ZIP_NAME.sha256" | cut -d' ' -f1)\` |
          | \`$ZIP_NAME\` | \`$(du -h "$ZIP_NAME" | cut -f1)\` | MD5 | \`$(cat "$ZIP_NAME.md5" | cut -d' ' -f1)\` |
          
          ### 📋 Installation Instructions
          
          1. **Download**: Click on the ZIP file below
          2. **Verify**: Check the file integrity using the provided checksums
          3. **Extract**: Unzip to your desired location
          4. **Setup**: Follow the README.md instructions
          
          ### 🔍 What's Included
          
          - ✅ Source code (production-ready)
          - ✅ Documentation files
          - ✅ Configuration templates
          - ✅ All necessary project files
          - ❌ Development dependencies excluded
          - ❌ Build artifacts excluded
          - ❌ Environment files excluded
          
          ### 🔐 Verification Commands
          
          \`\`\`bash
          # Verify SHA256
          echo "$(cat "$ZIP_NAME.sha256")" | sha256sum -c
          
          # Verify MD5
          echo "$(cat "$ZIP_NAME.md5")" | md5sum -c
          \`\`\`
          
          ---
          
          **Build Time**: \`$(date -u +"%Y-%m-%d %H:%M:%S UTC")\`
          **Commit**: \`\${GITEA_SHA:0:8}\`
          EOF
          
          echo "Generated release notes:"
          cat release_notes.md

      - name: Create Gitea Release
        run: |
          # Use Gitea's API to create release
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "tag_name": "'$TAG_NAME'",
              "name": "'$RELEASE_NAME'",
              "body": "'"$(cat release_notes.md | sed 's/"/\\"/g' | tr '\n' '\\n')"'",
              "draft": false,
              "prerelease": false
            }' \
            "${{ gitea.api_url }}/repos/${{ gitea.repository }}/releases" > release_response.json
          
          # Extract upload URL
          RELEASE_ID=$(cat release_response.json | grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2)
          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV
          echo "Created release with ID: ${RELEASE_ID}"

      - name: Upload ZIP Asset
        run: |
          echo "Uploading ZIP file: $ZIP_NAME"
          
          # Upload the ZIP file
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
            -H "Content-Type: application/zip" \
            -F "attachment=@$ZIP_NAME" \
            "${{ gitea.api_url }}/repos/${{ gitea.repository }}/releases/$RELEASE_ID/assets?name=$ZIP_NAME"
          
          if [ $? -eq 0 ]; then
            echo "✅ Successfully uploaded ZIP file"
          else
            echo "❌ Failed to upload ZIP file"
            exit 1
          fi

      - name: Upload Checksum Files
        run: |
          echo "Uploading checksum files..."
          
          # Upload SHA256 checksum
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
            -H "Content-Type: text/plain" \
            -F "attachment=@$ZIP_NAME.sha256" \
            "${{ gitea.api_url }}/repos/${{ gitea.repository }}/releases/$RELEASE_ID/assets?name=$ZIP_NAME.sha256"
          
          if [ $? -eq 0 ]; then
            echo "✅ Successfully uploaded SHA256 checksum"
          else
            echo "⚠️ Failed to upload SHA256 checksum"
          fi
          
          # Upload MD5 checksum
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
            -H "Content-Type: text/plain" \
            -F "attachment=@$ZIP_NAME.md5" \
            "${{ gitea.api_url }}/repos/${{ gitea.repository }}/releases/$RELEASE_ID/assets?name=$ZIP_NAME.md5"
          
          if [ $? -eq 0 ]; then
            echo "✅ Successfully uploaded MD5 checksum"
          else
            echo "⚠️ Failed to upload MD5 checksum"
          fi

      - name: Update Release with Detailed Notes
        run: |
          echo "Updating release with detailed information..."
          
          # Create detailed release notes after we have all the file info
          cat > detailed_release_notes.md << EOF
          ## 🚀 Release $TAG_NAME
          
          ### 📦 Download Files
          
          - **ZIP Package**: \`$ZIP_NAME\` ($(du -h "$ZIP_NAME" | cut -f1))
          - **SHA256**: \`$(cat "$ZIP_NAME.sha256" | cut -d' ' -f1)\`
          - **MD5**: \`$(cat "$ZIP_NAME.md5" | cut -d' ' -f1)\`
          
          ### 📋 Installation
          
          1. Download the ZIP file from the assets below
          2. Verify integrity using the checksum files
          3. Extract and follow README instructions
          
          ### 🔐 Verification
          
          \`\`\`bash
          # Verify SHA256
          sha256sum -c $ZIP_NAME.sha256
          
          # Verify MD5  
          md5sum -c $ZIP_NAME.md5
          \`\`\`
          
          **Built**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF
          
          # Convert to simple text for JSON (avoid complex escaping)
          RELEASE_BODY=$(cat detailed_release_notes.md | tr '\n' ' ' | sed 's/"/\\"/g')
          
          # Update the release with detailed notes
          cat > update_payload.json << EOF
          {
            "body": "$RELEASE_BODY"
          }
          EOF
          
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d @update_payload.json \
            "${{ gitea.api_url }}/repos/${{ gitea.repository }}/releases/$RELEASE_ID"
          
      - name: Final Summary
        run: |
          echo "## 🎉 Release Created Successfully!" 
          echo ""
          echo "**Release**: $RELEASE_NAME"
          echo "**Tag**: $TAG_NAME"
          echo "**ZIP File**: $ZIP_NAME"
          echo "**Size**: $(du -h "$ZIP_NAME" | cut -f1)"
          echo "**SHA256**: $(cat "$ZIP_NAME.sha256" | cut -d' ' -f1)"
          echo ""
          echo "### 📥 Assets Uploaded:"
          echo "- ✅ ZIP file"
          echo "- ✅ SHA256 checksum"  
          echo "- ✅ MD5 checksum"
          echo ""
          echo "🔗 **View Release**: ${{ gitea.server_url }}/${{ gitea.repository }}/releases/tag/$TAG_NAME"