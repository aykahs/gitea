name: Create Release ZIP

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.
  workflow_dispatch:  # Allow manual trigger
    inputs:
      tag_name:
        description: 'Release tag name'
        required: true
        default: 'v1.0.0'

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history

      - name: Set release variables
        id: vars
        run: |
          if [ "${{ gitea.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="${{ inputs.tag_name }}"
          else
            TAG_NAME="${GITEA_REF_NAME}"
          fi
          
          echo "tag_name=${TAG_NAME}" >> $GITEA_OUTPUT
          echo "release_name=Release ${TAG_NAME}" >> $GITEA_OUTPUT
          echo "zip_name=${GITEA_REPOSITORY##*/}-${TAG_NAME}.zip" >> $GITEA_OUTPUT
          
          echo "Release tag: ${TAG_NAME}"
          echo "ZIP filename: ${GITEA_REPOSITORY##*/}-${TAG_NAME}.zip"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip rsync

      - name: Create project ZIP
        run: |
          # Get the variables from the previous step
          ZIP_NAME="${{ steps.vars.outputs.zip_name }}"
          
          # Create a clean directory for the release
          mkdir -p release-build
          
          echo "Creating release ZIP: ${ZIP_NAME}"
          
          # Copy project files (exclude development and system files)
          rsync -av \
                --exclude='.git' \
                --exclude='.gitea' \
                --exclude='node_modules' \
                --exclude='*.log' \
                --exclude='.env' \
                --exclude='.env.local' \
                --exclude='.env.example' \
                --exclude='dist' \
                --exclude='build' \
                --exclude='release-build' \
                --exclude='.DS_Store' \
                --exclude='Thumbs.db' \
                --exclude='*.tmp' \
                --exclude='.cache' \
                --exclude='coverage' \
                . release-build/
          
          # Create ZIP file
          cd release-build
          zip -r "../${ZIP_NAME}" . -x "*.git*"
          cd ..
          
          # Verify the ZIP was created
          if [ ! -f "${ZIP_NAME}" ]; then
            echo "❌ Error: ZIP file was not created"
            exit 1
          fi
          
          # Generate checksums
          sha256sum "${ZIP_NAME}" > "${ZIP_NAME}.sha256"
          md5sum "${ZIP_NAME}" > "${ZIP_NAME}.md5"
          
          echo "✅ Created ZIP: ${ZIP_NAME}"
          echo "📦 ZIP size: $(du -h "${ZIP_NAME}" | cut -f1)"
          
          # Show checksums
          echo "🔐 SHA256: $(cat "${ZIP_NAME}.sha256" | cut -d' ' -f1)"
          echo "🔐 MD5: $(cat "${ZIP_NAME}.md5" | cut -d' ' -f1)"
          
          # List contents for verification
          echo "📋 ZIP contents:"
          unzip -l "${ZIP_NAME}" | head -20

      - name: Generate release notes
        run: |
          # Get variables
          ZIP_NAME="${{ steps.vars.outputs.zip_name }}"
          TAG_NAME="${{ steps.vars.outputs.tag_name }}"
          
          # Generate release notes with proper variable substitution
          cat > release_notes.md << EOF
          ## 🚀 Release ${TAG_NAME}
          
          ### 📦 Download Information
          
          | File | Size | Checksum Type | Hash |
          |------|------|---------------|------|
          | \`${ZIP_NAME}\` | \`$(du -h "${ZIP_NAME}" | cut -f1)\` | SHA256 | \`$(cat "${ZIP_NAME}.sha256" | cut -d' ' -f1)\` |
          | \`${ZIP_NAME}\` | \`$(du -h "${ZIP_NAME}" | cut -f1)\` | MD5 | \`$(cat "${ZIP_NAME}.md5" | cut -d' ' -f1)\` |
          
          ### 📋 Installation Instructions
          
          1. **Download**: Click on the ZIP file below
          2. **Verify**: Check the file integrity using the provided checksums
          3. **Extract**: Unzip to your desired location
          4. **Setup**: Follow the README.md instructions
          
          ### 🔍 What's Included
          
          - ✅ Source code (production-ready)
          - ✅ Documentation files
          - ✅ Configuration templates
          - ✅ All necessary project files
          - ❌ Development dependencies excluded
          - ❌ Build artifacts excluded
          - ❌ Environment files excluded
          
          ### 🔐 Verification Commands
          
          \`\`\`bash
          # Verify SHA256
          echo "$(cat "${ZIP_NAME}.sha256")" | sha256sum -c
          
          # Verify MD5
          echo "$(cat "${ZIP_NAME}.md5")" | md5sum -c
          \`\`\`
          
          ---
          
          **Build Time**: \`$(date -u +"%Y-%m-%d %H:%M:%S UTC")\`
          **Commit**: \`\${GITEA_SHA:0:8}\`
          EOF
          
          echo "Generated release notes:"
          cat release_notes.md

      - name: Create Gitea Release
        run: |
          # Use Gitea's API to create release
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "tag_name": "${{ steps.vars.outputs.tag_name }}",
              "name": "${{ steps.vars.outputs.release_name }}",
              "body": "'"$(cat release_notes.md | sed 's/"/\\"/g' | tr '\n' '\\n')"'",
              "draft": false,
              "prerelease": false
            }' \
            "${{ gitea.api_url }}/repos/${{ gitea.repository }}/releases" > release_response.json
          
          # Extract upload URL
          RELEASE_ID=$(cat release_response.json | grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2)
          echo "release_id=${RELEASE_ID}" >> $GITEA_OUTPUT
          echo "Created release with ID: ${RELEASE_ID}"

      - name: Upload ZIP Asset
        run: |
          # Upload the ZIP file
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
            -H "Content-Type: application/zip" \
            -F "attachment=@${{ steps.vars.outputs.zip_name }}" \
            "${{ gitea.api_url }}/repos/${{ gitea.repository }}/releases/${{ steps.create-release.outputs.release_id }}/assets?name=${{ steps.vars.outputs.zip_name }}"

      - name: Upload Checksum Files
        run: |
          # Upload SHA256 checksum
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
            -H "Content-Type: text/plain" \
            -F "attachment=@${{ steps.vars.outputs.zip_name }}.sha256" \
            "${{ gitea.api_url }}/repos/${{ gitea.repository }}/releases/${{ steps.create-release.outputs.release_id }}/assets?name=${{ steps.vars.outputs.zip_name }}.sha256"
          
          # Upload MD5 checksum
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITEA_TOKEN }}" \
            -H "Content-Type: text/plain" \
            -F "attachment=@${{ steps.vars.outputs.zip_name }}.md5" \
            "${{ gitea.api_url }}/repos/${{ gitea.repository }}/releases/${{ steps.create-release.outputs.release_id }}/assets?name=${{ steps.vars.outputs.zip_name }}.md5"

      - name: Summary
        run: |
          echo "## 🎉 Release Created Successfully!" 
          echo ""
          echo "**Release**: ${{ steps.vars.outputs.release_name }}"
          echo "**Tag**: ${{ steps.vars.outputs.tag_name }}"
          echo "**ZIP File**: ${{ steps.vars.outputs.zip_name }}"
          echo "**Size**: $(du -h "${{ steps.vars.outputs.zip_name }}" | cut -f1)"
          echo "**SHA256**: $(cat "${{ steps.vars.outputs.zip_name }}.sha256" | cut -d' ' -f1)"
          echo ""
          echo "### 📥 Assets Uploaded:"
          echo "- ✅ ZIP file"
          echo "- ✅ SHA256 checksum"
          echo "- ✅ MD5 checksum"
          echo ""
          echo "🔗 **View Release**: ${{ gitea.server_url }}/${{ gitea.repository }}/releases/tag/${{ steps.vars.outputs.tag_name }}"